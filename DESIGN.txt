Copyright Â© Kevin Alavik (shittydev.com) <kevin@alavik.se> <kevin@shittydev.com>
The sx64 CPU design is licensed under the MIT License.

--------------------------------------------------------------------------------
sx64 CPU Design
--------------------------------------------------------------------------------

Note: This design is a work in progress, not all sections are finished.

General Idea
------------
The sx64 CPU architecture is a 64-bit design focusing on simplicity and efficiency. It aims to offer a clean and straightforward model that differs from traditional complex architectures like x86 or AArch64. The sx64 design emphasizes a minimalistic approach to support efficient and clear instruction processing.

Registers
---------
- General Purpose Registers (R0-R7):
  Eight 64-bit registers used for various data storage tasks. They hold values for operations, function arguments, return values, counters, and pointers.

- Special Purpose Registers:
  - SB (Stack Base): A 64-bit register that defines the starting address of the stack. The stack grows upward in memory.
  - SP (Stack Pointer): A 64-bit register that indicates the current top of the stack. It adjusts as data is added or removed.
  - IP (Instruction Pointer): A 64-bit register that points to the address of the current instruction, advancing as the CPU executes instructions.
  - FR (Flags Register): A 16-bit register containing condition flags (Zero, Carry, Overflow, Sign) used for arithmetic and logical operations.

Instruction Format
------------------
The sx64 architecture uses a Complex Instruction Set Computing (CISC) model, with instructions varying in size. The length of each instruction changes dynamically based on its opcode. This flexibility allows for a broader range of operations and potentially more compact code compared to fixed-length instruction sets.

Startup and Initialization
--------------------------
Upon startup, the sx64 CPU initializes by clearing all registers. It sets the Instruction Pointer (IP) to the address of the system bootstrap code (sys-bootstrap) to start hardware and CPU initialization. Following this, it jumps to the kernel bootstrap code (krnl-bootstrap) to load the operating system kernel. The exact addresses for these bootstraps are not predefined.

Copyright Note
--------------
The sx64 CPU design is part of the Sphynx Projects / OS, a continuing development by Kevin Alavik. For additional details, visit github.com/sphynxos or sphynx.shittydev.com. Contact Kevin Alavik at kevin@alavik.se or kevin@shittydev.com for further inquiries.
